<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meeting Minutes - gnisTask</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: "Inter", sans-serif;
            background-color: #f4f7f6;
            padding: 20px;
        }

        .form-container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            margin-bottom: 30px;
        }

        .btn-primary {
            background-color: #4a90e2;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center mb-4">Meeting Minutes Entry</h1>

        <div class="form-container">
            <form id="meetingForm">
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Customer Type</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="CustomerType" id="corporateRadio" value="Corporate" checked>
                                <label class="form-check-label" for="corporateRadio">Corporate</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="CustomerType" id="individualRadio" value="Individual">
                                <label class="form-check-label" for="individualRadio">Individual</label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="CustomerId" class="form-label">Customer Name</label>
                            <select class="form-select" id="CustomerId" name="CustomerId">
                                <option value="">Select Customer Name</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="MeetingDate" class="form-label">Date</label>
                            <input type="date" class="form-control" id="MeetingDate" name="MeetingDate">
                        </div>

                        <div class="mb-3">
                            <label for="MeetingTime" class="form-label">Time</label>
                            <input type="time" class="form-control" id="MeetingTime" name="MeetingTime">
                        </div>

                        <div class="mb-3">
                            <label for="MeetingPlace" class="form-label">Meeting Place</label>
                            <input type="text" class="form-control" id="MeetingPlace" name="MeetingPlace">
                        </div>

                        <div class="mb-3">
                            <label for="AttendsFromClientSide" class="form-label">Attends From Client Side</label>
                            <textarea class="form-control" id="AttendsFromClientSide" name="AttendsFromClientSide" rows="3"></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="AttendsFromHostSide" class="form-label">Attends From Host Side</label>
                            <textarea class="form-control" id="AttendsFromHostSide" name="AttendsFromHostSide" rows="3"></textarea>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="MeetingAgenda" class="form-label">Meeting Agenda</label>
                            <textarea class="form-control" id="MeetingAgenda" name="MeetingAgenda" rows="3"></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="MeetingDiscussion" class="form-label">Meeting Discussion</label>
                            <textarea class="form-control" id="MeetingDiscussion" name="MeetingDiscussion" rows="3"></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="MeetingDecision" class="form-label">Meeting Decision</label>
                            <textarea class="form-control" id="MeetingDecision" name="MeetingDecision" rows="3"></textarea>
                        </div>
                    </div>
                </div>

                <h2 class="mt-5 mb-3">Interested Product/Service</h2>

                <div class="row mb-4 align-items-end">
                    <div class="col-md-5">
                        <label class="form-label">Select Product/Service</label>
                        <select class="form-select" id="productServiceDropdown">
                            <option value="">Select Product/Service</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="productQuantity" min="0.01" step="0.01">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Unit</label>
                        <input type="text" class="form-control" id="productUnit" readonly>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-primary w-100" id="addProductButton">Add</button>
                    </div>
                </div>

                <div class="table-responsive mb-4">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>SL#</th>
                                <th>Product/Service Name</th>
                                <th>Quantity</th>
                                <th>Unit</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="productServiceTableBody">
                            <tr><td colspan="5" class="text-center">No products added</td></tr>
                        </tbody>
                    </table>
                </div>

                <button type="button" id="submitBtn" class="btn btn-primary w-100">Save All Meeting Data</button>
                <div id="message" class="mt-3"></div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('meetingForm');
            const submitBtn = document.getElementById('submitBtn');
            const messageDiv = document.getElementById('message');
            const customerTypeRadios = document.querySelectorAll('input[name="CustomerType"]');
            const customerSelect = document.getElementById('CustomerId');
            const productServiceDropdown = document.getElementById('productServiceDropdown');
            const productUnitInput = document.getElementById('productUnit');
            const productQuantityInput = document.getElementById('productQuantity');
            const addProductButton = document.getElementById('addProductButton');
            const productServiceTableBody = document.getElementById('productServiceTableBody');

            let meetingDetailsData = [];
            let editRowIndex = -1;

            function loadCustomers(customerType) {
                const url = customerType === 'Corporate'
                    ? '/Meeting/GetCorporateCustomers'
                    : '/Meeting/GetIndividualCustomers';

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        customerSelect.innerHTML = '<option value="">Select Customer Name</option>';
                        data.forEach(customer => {
                            const option = document.createElement('option');
                            option.value = customer.id;
                            option.textContent = customer.customerName;
                            customerSelect.appendChild(option);
                        });
                    });
            }

            function loadProducts() {
                fetch('/Meeting/GetProductsServices')
                    .then(response => response.json())
                    .then(data => {
                        productServiceDropdown.innerHTML = '<option value="">Select Product/Service</option>';
                        data.forEach(product => {
                            const option = document.createElement('option');
                            option.value = product.id;
                            option.textContent = product.productName;
                            option.dataset.unit = product.unit;
                            productServiceDropdown.appendChild(option);
                        });
                    });
            }

            loadCustomers('Corporate');
            loadProducts();

            customerTypeRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    loadCustomers(this.value);
                });
            });

            productServiceDropdown.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                productUnitInput.value = selectedOption.dataset.unit || '';
            });

            function renderProductTable() {
                productServiceTableBody.innerHTML = '';

                if (meetingDetailsData.length === 0) {
                    productServiceTableBody.innerHTML = '<tr><td colspan="5" class="text-center">No products added</td></tr>';
                    return;
                }

                meetingDetailsData.forEach((item, index) => {
                    const row = `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${item.ProductNameDisplay}</td>
                            <td>${item.Quantity}</td>
                            <td>${item.Unit}</td>
                            <td>
                                <button type="button" class="btn btn-warning btn-sm edit-btn" data-index="${index}">Edit</button>
                                <button type="button" class="btn btn-danger btn-sm delete-btn" data-index="${index}">Delete</button>
                            </td>
                        </tr>
                    `;
                    productServiceTableBody.insertAdjacentHTML('beforeend', row);
                });
            }

            addProductButton.addEventListener('click', function() {
                const productId = productServiceDropdown.value;
                const productName = productServiceDropdown.options[productServiceDropdown.selectedIndex].textContent;
                const quantity = parseFloat(productQuantityInput.value);
                const unit = productUnitInput.value;

                if (!productId || isNaN(quantity)) return;

                const newItem = {
                    ProductId: parseInt(productId),
                    ProductName: productName,
                    ProductNameDisplay: productName,
                    Quantity: quantity,
                    Unit: unit
                };

                if (editRowIndex === -1) {
                    meetingDetailsData.push(newItem);
                } else {
                    meetingDetailsData[editRowIndex] = newItem;
                    editRowIndex = -1;
                    addProductButton.textContent = 'Add';
                }

                renderProductTable();
                productServiceDropdown.value = '';
                productQuantityInput.value = '';
                productUnitInput.value = '';
            });

            productServiceTableBody.addEventListener('click', function(e) {
                if (e.target.classList.contains('edit-btn')) {
                    const index = parseInt(e.target.dataset.index);
                    const item = meetingDetailsData[index];

                    productServiceDropdown.value = item.ProductId;
                    productQuantityInput.value = item.Quantity;
                    productUnitInput.value = item.Unit;

                    editRowIndex = index;
                    addProductButton.textContent = 'Update';
                }

                if (e.target.classList.contains('delete-btn')) {
                    const index = parseInt(e.target.dataset.index);
                    if (confirm('Delete this item?')) {
                        meetingDetailsData.splice(index, 1);
                        renderProductTable();
                    }
                }
            });

submitBtn.addEventListener('click', function() {

    const timeInput = document.getElementById('MeetingTime').value;
    const [hours, minutes] = timeInput.split(':');
    const timeSpanString = `${hours}:${minutes}:00`;

    const formData = {
        CustomerType: document.querySelector('input[name="CustomerType"]:checked').value,
        CustomerId: parseInt(document.getElementById('CustomerId').value),
        MeetingDate: document.getElementById('MeetingDate').value,
        MeetingTime: timeSpanString,
        MeetingPlace: document.getElementById('MeetingPlace').value,
        AttendsFromClientSide: document.getElementById('AttendsFromClientSide').value,
        AttendsFromHostSide: document.getElementById('AttendsFromHostSide').value,
        MeetingAgenda: document.getElementById('MeetingAgenda').value,
        MeetingDiscussion: document.getElementById('MeetingDiscussion').value,
        MeetingDecision: document.getElementById('MeetingDecision').value,
        ProductDetails: meetingDetailsData.map(item => ({
            ProductId: item.ProductId,
            ProductName: item.ProductName,
            Quantity: item.Quantity,
            Unit: item.Unit
        }))
    };

    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    fetch('/Meeting/SaveMeetingMaster', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token
        },
        body: JSON.stringify(formData)
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => { throw err; });
        }
        return response.json();
    })
    .then(result => {
        if (result.success) {
            messageDiv.textContent = result.message;
            messageDiv.className = 'alert alert-success mt-3';

            form.reset();
            meetingDetailsData = [];
            renderProductTable();
            loadCustomers('Corporate');
        } else {
            throw new Error(result.message || 'Unknown error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        let errorMessage = 'Error submitting form';
        if (error.errors && Array.isArray(error.errors)) {
            errorMessage += ': ' + error.errors.join(', ');
        } else if (error.message) {
            errorMessage += ': ' + error.message;
        }
        messageDiv.textContent = errorMessage;
        messageDiv.className = 'alert alert-danger mt-3';
    });
});
        });
    </script>
</body>
</html>